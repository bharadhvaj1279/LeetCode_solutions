Given an integer array nums of size n, return the number with the value closest to 0 in nums. If there are multiple answers, return the number with the largest value.

 

Example 1:

Input: nums = [-4,-2,1,4,8]
Output: 1
Explanation:
The distance from -4 to 0 is |-4| = 4.
The distance from -2 to 0 is |-2| = 2.
The distance from 1 to 0 is |1| = 1.
The distance from 4 to 0 is |4| = 4.
The distance from 8 to 0 is |8| = 8.
Thus, the closest number to 0 in the array is 1.
Example 2:

Input: nums = [2,-1,1]
Output: 1
Explanation: 1 and -1 are both the closest numbers to 0, so 1 being larger is returned.
 

Constraints:

1 <= n <= 1000
-105 <= nums[i] <= 105

-------------------------------------------------------
solution in python:

class Solution:
    def findClosestNumber(self, nums: List[int]) -> int:
        for num in nums:
            if abs(num) < abs(nums[0]) or (abs(num) == abs(nums[0]) and num > nums[0]):
                nums[0] = num        
        return nums[0]
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

another Python solution:


class Solution:
    def findClosestNumber(self, nums: List[int]) -> int:
        # for num in nums:
        #     if abs(num) < abs(nums[0]) or (abs(num) == abs(nums[0]) and num > nums[0]):
        #         nums[0] = num        
        # return nums[0]
        n=[]
        for i in nums:
            if i<=0:
                n.append(-i)
            elif i>+0 and i not in n:
                n.append(i)
                
            n.sort()
        if  len(nums)==1:
            return nums[0]
        elif n[0] in nums :
            return n[0]
        else:
            return -n[0]



------------------------------------------------------------------------------
solution in java:

