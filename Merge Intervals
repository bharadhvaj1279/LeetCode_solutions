Given an array of intervals where intervals[i] = [starti, endi], merge all overlapping intervals, and return an array of the non-overlapping intervals that cover all the intervals in the input.

 

Example 1:

Input: intervals = [[1,3],[2,6],[8,10],[15,18]]
Output: [[1,6],[8,10],[15,18]]
Explanation: Since intervals [1,3] and [2,6] overlap, merge them into [1,6].
Example 2:

Input: intervals = [[1,4],[4,5]]
Output: [[1,5]]
Explanation: Intervals [1,4] and [4,5] are considered overlapping.
Example 3:

Input: intervals = [[4,7],[1,4]]
Output: [[1,7]]
Explanation: Intervals [1,4] and [4,7] are considered overlapping.
 

Constraints:

1 <= intervals.length <= 104
intervals[i].length == 2
0 <= starti <= endi <= 104

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
solution in python :

class Solution:
    def merge(self, intervals: List[List[int]]) -> List[List[int]]:
        intervals.sort()   
        start = intervals[0][0]
        end = intervals[0][1]
        res = []

        for i in intervals[1:]:
            if i[0] <= end:   
                if start > i[0]:
                    start = i[0]
                if end < i[1]:
                    end = i[1]
            else:             
                res.append([start, end])
                start, end = i[0], i[1]

        res.append([start, end])  
        return res
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
solution in java :

